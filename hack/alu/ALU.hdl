/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // pre-setting
    Mux16(a=x, b=false, sel=zx, out=outzx); // Zero the x if 1
    Mux16(a=y, b=false, sel=zy, out=outzy); // Zero the y if 1
    Not16(in=outzx, out=negx); // Negate the x if 1
    Not16(in=outzy, out=negy); // Negate the y if 1
    Mux16(a=outzx, b=negx, sel=nx, out=outnx); 
    Mux16(a=outzy, b=negy, sel=ny, out=outny); 

    // function & negate
    And16(a=outnx, b=outny, out=andout);
    Add16(a=outnx, b=outny, out=orout);
    Mux16(a=andout, b=orout, sel=f, out=outf);
    Not16(in=outf, out=negoutf);
    Mux16(a=outf, b=negoutf, sel=no, out=out, out[0..7]=t1, out[8..15]=t2, out[15]=ng);
    
    // last 2-bits 
    Or8Way(in=t1, out=orout1);
    Or8Way(in=t2, out=orout2);
    Or(a=orout1, b=orout2, out=outzr);
    Mux(a=true, b=false, sel=outzr, out=zr);
}